import { Injectable, HttpException, HttpStatus } from '@nestjs/common';
import fetch from 'node-fetch';
import { CreateAmbassadorDto } from './dto/create-ambassador.dto';

@Injectable()
export class AmbassadorsService {
  async processApplication(data: CreateAmbassadorDto) {
    try {
      // 1. –ù–∞–¥—Å–∏–ª–∞—î–º–æ —É Telegram
      await this.sendToTelegram(data);

      // 2. –ù–∞–¥—Å–∏–ª–∞—î–º–æ —É Strapi
      await this.sendToStrapi(data);

      return { success: true };
    } catch (err) {
      console.error(err);
      throw new HttpException('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—è–≤–∫–∏', HttpStatus.BAD_REQUEST);
    }
  }

  private async sendToTelegram(data: CreateAmbassadorDto) {
    const TOKEN = process.env.TELEGRAM_TOKEN;
    const CHAT_ID = process.env.TELEGRAM_CHAT_ID;
    const URI_API = `https://api.telegram.org/bot${TOKEN}/sendMessage`;

    const message = `
üîî –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ Time2Fest
üë§ –Ü–º‚Äô—è: ${data.name}
üåç –ö—Ä–∞—ó–Ω–∞: ${data.country}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${data.contactMethod} ‚Üí ${data.contactLink}
üìù –ú–æ—Ç–∏–≤–∞—Ü—ñ—è: ${data.motivation}
    `;

    await fetch(URI_API, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ chat_id: CHAT_ID, text: message }),
    });
  }

  private async sendToStrapi(data: CreateAmbassadorDto) {
    const STRAPI_URL = process.env.STRAPI_URL;
    const STRAPI_TOKEN = process.env.STRAPI_TOKEN;

    await fetch(`${STRAPI_URL}/api/ambassadors`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${STRAPI_TOKEN}`,
      },
      body: JSON.stringify({ data }),
    });
  }
}
