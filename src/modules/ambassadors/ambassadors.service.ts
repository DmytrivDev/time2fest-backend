import { Injectable, HttpException, HttpStatus } from "@nestjs/common";
import { StrapiService } from '../../services/strapi.service';
import { CreateAmbassadorDto } from "./dto/create-ambassador.dto";
import axios from "axios";

@Injectable()
export class AmbassadorsService {
  constructor(private readonly strapi: StrapiService) {}

  async processApplication(data: CreateAmbassadorDto) {
    try {
      // 1. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤ Telegram
      await this.sendToTelegram(data);

      // 2. –ù–∞–¥—Å–∏–ª–∞—î–º–æ –≤ Strapi
      await this.sendToStrapi(data);

      return { success: true };
    } catch (err) {
      console.error(err);
      throw new HttpException(
        "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–±—Ä–æ–±—Ü—ñ –∑–∞—è–≤–∫–∏",
        HttpStatus.BAD_REQUEST
      );
    }
  }

  private async sendToTelegram(data: Record<string, any>) {
    const TOKEN = process.env.TELEGRAM_TOKEN;
    const CHAT_ID = process.env.TELEGRAM_CHAT_ID;
    const URI_API = `https://api.telegram.org/bot${TOKEN}/sendMessage`;

    // –§–æ—Ä–º—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –∑ –∫–ª—é—á—ñ–≤ DTO
    const lines = Object.entries(data)
      .map(([key, value]) => {
        if (value === undefined || value === null || value === "") return null;

        if (typeof value === "object") {
          const sub = Object.entries(value)
            .map(([subKey, subVal]) => `   ‚Ä¢ ${subKey}: ${subVal}`)
            .join("\n");
          return `*${key}:*\n${sub}`;
        }

        return `*${key}:* ${value}`;
      })
      .filter(Boolean);

    const message = `üîî –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ Time2Fest\n\n${lines.join("\n")}`;

    await axios.post(URI_API, {
      chat_id: CHAT_ID,
      text: message,
      parse_mode: "Markdown",
    });
  }

  private async sendToStrapi(data: CreateAmbassadorDto) {
    return this.strapi.post("/ambassadors", data); // StrapiService –≤–∂–µ –æ–±–≥–æ—Ä—Ç–∞—î { data }
  }
}
